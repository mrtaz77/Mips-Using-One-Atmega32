#define CLOCK 0x1
#define  RESET 0x2

#include <avr/io.h>
#define F_CPU 1000000
#include <util/delay.h>

unsigned int instruction[256] =
{ 0x7023, 0x7035, 0xa231, 0xa134, 0x7452, 0xf323, 0x8222, 0x6441, 0x2421, 0x3270, 0x0000, 0xd441, 0xc422, 0x0241, 0x9153, 0x3220
, 0x0000, 0xf710, 0x6771, 0xf730, 0x6771, 0xb115, 0x7771, 0xc710, 0x1336, 0xc362, 0xf760, 0x6771, 0x7771, 0xc730, 0xe333, 0x7771
, 0xc730, 0x3270, 0x0000, 0x4311, 0x6113, 0x0000, 0x3100, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

unsigned char Mem_Element[16];

unsigned char registers[16];

int main(void)
{
	DDRA = 0xe0; // clock reset S2 S1 S0
	DDRD = 0xff;
	
	for(int i = 0; i < 16; i++) {
		registers[i] = i;
	}
	registers[7] = 0x0f; // initialize stack pointer
	
	unsigned char pc = 0;
	
	int current_clock = 1;
	int prev_clock = 1;
	
    /* Replace with your application code */
    while (1) {
		unsigned char flag = (PINA & 0x3);
		prev_clock = current_clock;
		current_clock = (flag & CLOCK);
		unsigned char reset_pc = (flag & RESET) >> 1;
		
		if(prev_clock == 1 && current_clock == 0) {
			unsigned int current_instruction = instruction[pc];
			pc = pc + 1;
			unsigned char opcode = ((current_instruction & 0xf000) >> 12);
			unsigned char ins_11_8 = ((current_instruction & 0x0f00) >> 8);
			unsigned char ins_7_4 = ((current_instruction & 0x00f0) >> 4);
			unsigned char ins_3_0 = ((current_instruction & 0x000f));
			
			if (opcode == 0) {
				registers[ins_3_0] = (registers[ins_11_8] & registers[ins_7_4]);
			} else if (opcode == 1) {
				registers[ins_7_4] = (registers[ins_11_8] & ins_3_0);
			} else if (opcode == 2) {
				if(ins_3_0 > 7) ins_3_0 = -(16 - ins_3_0);
				unsigned char check = registers[ins_11_8] - registers[ins_7_4];
				if(check == 0) pc = pc + ins_3_0; 
			} else if (opcode == 3) {
				pc = ((current_instruction & 0x0ff0) >> 4);
			} else if (opcode == 4) {
				if(ins_3_0 > 7) ins_3_0 = -(16 - ins_3_0);
				unsigned char check = registers[ins_11_8] - registers[ins_7_4];
				if(check != 0) pc = pc + ins_3_0;
			} else if (opcode == 5) {
				registers[ins_3_0] = registers[ins_11_8] - registers[ins_7_4];
			} else if (opcode == 6) {
				if(ins_3_0 > 7)ins_3_0 = -(16 - ins_3_0);
				registers[ins_7_4] = registers[ins_11_8] - ins_3_0;
			} else if (opcode == 7) {
				if(ins_3_0 > 7)ins_3_0 = -(16 - ins_3_0);
				registers[ins_7_4] = registers[ins_11_8] + ins_3_0;
			} else if (opcode == 8) {
				registers[ins_7_4] = ((registers[ins_11_8] & 0xf) << ins_3_0);
			} else if (opcode == 9) {
				registers[ins_3_0] = registers[ins_11_8] | registers[ins_7_4];
			} else if (opcode == 10) {
				registers[ins_3_0] = registers[ins_11_8] + registers[ins_7_4];
			} else if (opcode == 11) {
				registers[ins_7_4] = registers[ins_11_8] | ins_3_0;
			} else if (opcode == 12) {
				unsigned char index = registers[ins_11_8] + ins_3_0;
				registers[ins_7_4] = Mem_Element[index & 0xf];
			} else if (opcode == 13) {
				registers[ins_7_4] = ((registers[ins_11_8] & 0xf) >> ins_3_0);
			} else if (opcode == 14) {
				registers[ins_3_0] = ((registers[ins_11_8] | registers[ins_7_4]) ^ 0xf);
			} else if (opcode == 15) {
				unsigned char index = registers[ins_11_8] + ins_3_0;
				Mem_Element[index & 0xf] = registers[ins_7_4];
			}
		}else if(reset_pc) {
			pc = 0;
		}
		
		unsigned char selection_bit = ((PINA & 0x1c) >> 2);
		
		PORTD = registers[selection_bit] & 0xf;
		_delay_ms(500);
    }
}

